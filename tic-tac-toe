#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <time.h>
#define X 88
#define O 79

void init_board(char board[][100], int num);
int get_player_move(int player, char board[][100], int num);
void disp_board(char board[][100], int num);

int main(int argc, char *argv[]){
	char board[100][100];	//돌을 받을 배열 
	int quit=0;				// 반복문을 종료하기위한 변수 
	int num, game;			// 칸의 수와 게임의 종류를 입력받을 변수 
	
	printf("칸의 수를 입력하시오.:");	//칸의 수를 입력받음 
	scanf("%d", &num);
	printf("게임을 선택하세요.(1. 사람 2. 컴퓨터):");	// 게임의 종류를 입력받음 
	scanf("%d", &game);
	
	if(game == 1){										//사람과 게임을 할 경우 
		init_board(board, num);							// 게임판을 초기화 해주는 함수 
		do{
			disp_board(board, num);						// 게임판의 상태를 출혁하는 함수 
	        quit=get_player_move(0,board, num);			// player1의 좌표를 입력받아 돌을 놓음  
	        if(quit==1) break;							// quit의 값이 1이면 종료 
	        disp_board(board, num);						// 게임판의 상태를 출혁하는 함수 
	        quit=get_player_move(1,board, num);			// player2의 좌표를 입력받아 돌을 놓음 
	        if(quit==1) break;							// quit의 값이 1이면 종료 
		}while(quit == 0);								// quit는 0일때 반복 
	}
	
	if(game == 2){										// 컴푸터와 게임을 할 경우 
		srand((unsigned)time(NULL));					// 좌표를 난수롤 생성 
		init_board(board, num);							// 게임판을 초기화 해주는 함수 
		do{
			disp_board(board, num);						// 게임판의 상태를 출혁하는 함수 	
	        quit=get_player_move(0,board, num);			// player의 좌표를 입력받아 돌을 놓음  
	        if(quit==1) break;							// quit의 값이 1이면 종료 
	        disp_board(board, num);						// 게임판의 상태를 출혁하는 함수 	
	        quit=computer_move(board, num);				// quit의 값이 1이면 종료 
	        if(quit==1) break;							// quit의 값이 1이면 종료
		}while(quit == 0);								// quit는 0일때 반복 
	}
	
	return 0;
	
}

void init_board(char board[][100], int num){			// 보드판을 초기화하는 함수 
	
	int i,j;
	
	for(i=0;i<num;i++){
		for(j=0;j<num;j++){
			board[i][j] = ' ';							// 배열 board[][]를 ' '롤 초기화함 
		}
	}
}

int winner(char board[][100], int num, int x, int y){	// 승리 조건 함수 
	int i, j;
	int count = 0;										// 돌의 수를 키운터할 변수 
	for(i=0;i<=num;i++){								// num까지 반복 
		if(board[x][i] == X){							// X돌일때 세로 판정 
			count++;									// count를 1씩증가 
			if(count == num){							// count의 값이 num과 같을때  
				printf("X  winner!");					// 승자 출력 
				exit(0);								// 종료 
			}
		}
		else if(board[x][i] == O){						// O돌 일때 
			count++;
			if(count == num){							
				printf("O  winner!");
				exit(0);
			}
		}
	}
	
	count = 0;
	for(i=0;i<=num;i++){
		if(board[i][y] == X){							// 가로 판정 
			count++;
			if(count == num){							
				printf("X  winner!");
				exit(0);
			}
		}
		else if(board[i][y] == O){
			count++;
			if(count == num){
				printf("O  winner!");
				exit(0);
			}
		}
	}
	
	count = 0;
	for(i=0, j=0;i<=num;i++,j++){
		if(board[i][j] == X){							// 왼쪽 대각선
		count++;
			if(count == num){
				printf("X  winner!");
				exit(0);
			}
		}
		else if(board[i][j] == O){
			count++;
			if(count == num){
				printf("O  winner!");
				exit(0);
			}
		}
	}
	
	count = 0;
	for(i=num, j=num;i<=0;i++, j--){
		if(board[i][j] == X){							// 오른쪽 대각선 
			count++;
			if(count == num){
				printf("X  winner!");
				exit(0);
			}
		}
		else if(board[i][j] == O){
			count++;
			if(count == num){
				printf("O  winner!");
				exit(0);
			}
		}
	}
}

int get_player_move(int player, char board[][100], int num){		// player가 입력한 좌표를 받아 화면에 출력하는 함수  
	int x,y,done=0;
	
	
	while(done != 1){												// done이 1이 될때가지 반복 
		printf("(x,y) 좌표(종료-1,-1): ");							// 좌표를 입력받음 
        scanf("%d %d",&x, &y);											
        if(x==-1&&y==-1) return 1;									// x와 y의 좌표가 -1 일대 반복문을 빠져나가면서 1을 반환함	
        if(board[x][y]==' ') break;									// 입력한 좌표의 배열값이 ' '이면 반복문을 빠져나감 
        else printf("잘못된 위치입니다.\n");						// 입력한 좌표의 배열값이 ' '이 아나면 다시 좌표를 입력받음 
	}
	
	if(player == 0){												// player가 0일때 
		board[x][y] = X;											// 배열에 X값을 넣음 
	}
	else{
		board[x][y] = O;											// player가 0이 아닐때 배열에 O값을 넣음 
	}
	
	winner(board, num, x, y);										// 승리 조건 함수 호출 
	return 0;
}

int computer_move(char board[][100], int num){						// computer가 입력한 좌표를 출력하는 함수 
	int x, y, done=0;		
	while(done != 1){												// done이 1이 될때가지 반복 
		printf("컴퓨터의 차례입니다...\n");							// 컴퓨터의 차례임을 알려주는 문구 출력 
		Sleep(1000);												// 1초간 딜레이 시킴 
		x = rand()%num;												// x좌표에 난수값에 num을 모듈러한 값을 넣음 
		y = rand()%num;												// y좌표에 난수값에 num을 모듈러한 값을 넣음 
		if(board[x][y]==' ')break;									// 배열값이 ' '이면 반복문을 빠져나감
		else printf("중복된자리를 선택했습니다.\n");				// 배열값이 ' '이 아나면 다시 좌표를 입력받음
		Sleep(500);
	}
	board[x][y] = O;												// O돌을 출력 
	winner(board, num, x, y);										// 승리 조건 함수 호출 
	
	return 0;
}
void disp_board(char board[100][100], int num){						// 보드의 상태를 나태내는 함수 
	int i,j;
	
	for(i=0;i<num;i++){												// 판을 기리기 위한 반복문 
		
		for(j=0;j<num;j++){
			printf("|---");											 
		}
		printf("\n");
		for(j=0;j<num;j++){
			printf("|  %c", board[i][j]);							// 빈칸안에 배열의 값을 문자형으로 출력함 
		}
		printf("\n");
	}
	
	for(i=0;i<num;i++){												// 판을 기리기 위한 반복문
		printf("|---");
	}
	printf("\n");
	
}
